<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on rv178</title>
    <link>https://rv178.is-a.dev/posts/</link>
    <description>Recent content in Posts on rv178</description>
    <image>
      <url>https://raw.githubusercontent.com/rv178/website/main/static/favicon.png</url>
      <link>https://raw.githubusercontent.com/rv178/website/main/static/favicon.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 18 Oct 2022 21:53:57 +0530</lastBuildDate><atom:link href="https://rv178.is-a.dev/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hyperbola Quintessence in Rust</title>
      <link>https://rv178.is-a.dev/posts/hyperbola-quintessence-in-rust/</link>
      <pubDate>Tue, 18 Oct 2022 21:53:57 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/hyperbola-quintessence-in-rust/</guid>
      <description>Welcome to my dev-blog series on writing a chess engine. This is part 3. Like always, suggestions are welcome!
Hyperbola quintessence? This is the definition from chessprogramming.org:
Hyperbola Quintessence applies the o^(o-2r)-trick also for vertical or diagonal negative Rays - by reversing the bit-order of up to one bit per rank or byte with a vertical flip aka x86-64 bswap.
Why did I go for this approach? Because I thought magic bitboards were too hard for me.</description>
    </item>
    
    <item>
      <title>Bitboards in Rust</title>
      <link>https://rv178.is-a.dev/posts/bitboards-in-rust/</link>
      <pubDate>Wed, 28 Sep 2022 21:46:16 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/bitboards-in-rust/</guid>
      <description>Introduction Hello there! I haven&amp;rsquo;t posted in a while because I was working on my chess engine. Specifically, representing the pieces as bitboards. Now you may ask what a bitboard is. You can use bitboards to represent a chess board in a piece-centric manner. What is so special about bitboards then? Doesn&amp;rsquo;t a piece list do the same thing? Well, representing a bitboard only requires a single unsigned 64 bit integer!</description>
    </item>
    
    <item>
      <title>Yew.rs With TailwindCSS</title>
      <link>https://rv178.is-a.dev/posts/yew-rs-with-tailwind/</link>
      <pubDate>Fri, 12 Aug 2022 18:57:42 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/yew-rs-with-tailwind/</guid>
      <description>Yew Like a lot of people, I think WASM is the future. Yew is an amazing frontend framework that helps in building web apps using WASM.
It&amp;rsquo;s incredibly easy to use and the performance of the app is EXTREMELY fast! I&amp;rsquo;m currently re-writing Snowstry with yew.rs for the frontend (switching from NextJS). Here&amp;rsquo;s the repo link.
Yew + Tailwind Setting up yew with tailwind was very easy as well. If you don&amp;rsquo;t know what tailwind is, here&amp;rsquo;s the link to their website.</description>
    </item>
    
    <item>
      <title>Switching to Wayland</title>
      <link>https://rv178.is-a.dev/posts/switching-to-wayland/</link>
      <pubDate>Wed, 27 Jul 2022 22:09:53 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/switching-to-wayland/</guid>
      <description>Hello! 11 days ago I switched from x11 to wayland, because 60 FPS scrolling is a feature too good to miss.
Now what is wayland, you may ask? Wayland is like a replacement to the traditional x11 display protocol. You can read more about it here.
My x11 setup consisted of the following software:
DWM as the window manager. Polybar as the status bar. Dunst as the notification daemon. ST as my terminal emulator.</description>
    </item>
    
    <item>
      <title>Writing a Build Automation Tool</title>
      <link>https://rv178.is-a.dev/posts/writing-a-build-automation-tool/</link>
      <pubDate>Fri, 08 Jul 2022 15:20:06 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/writing-a-build-automation-tool/</guid>
      <description>After using GNU Make for automating the build step in my projects, I had this idea of making my own build automation tool like Make.
I originally wanted to use Makefile-like syntax for the config file but instead settled with TOML after thinking about it for a while. I also used Rust to write this since I am kinda familiar with the language.
Rust has a TOML crate for parsing TOML files.</description>
    </item>
    
    <item>
      <title>FEN String Parsing in Rust</title>
      <link>https://rv178.is-a.dev/posts/fen-string-parsing-in-rust/</link>
      <pubDate>Wed, 29 Jun 2022 14:54:23 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/fen-string-parsing-in-rust/</guid>
      <description>I finally finished the FEN string parsing part of my chess engine after days of procrastinating and I just wanted to share my experience with everyone.
So a FEN string looks like this:
rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1 This is the FEN string of the starting position in standard chess. It looks like random crap at first glance but this string conveys a lot of information.
So let&amp;rsquo;s divide it into parts.</description>
    </item>
    
    <item>
      <title>A brief recap of my Linux journey up until now</title>
      <link>https://rv178.is-a.dev/posts/my-linux-journey/</link>
      <pubDate>Wed, 19 Jan 2022 09:47:49 +0530</pubDate>
      
      <guid>https://rv178.is-a.dev/posts/my-linux-journey/</guid>
      <description>So hi! I have been using Linux for almost 5 months now and I have learned a lot! Just wanted to share my experience with everyone.
When I asked my friend (who is an expert in Linux), he recommended me Pop!_OS, an Ubuntu based distro. So, I installed it and it was my first Linux distribution. My experience using Pop!_OS was amazing and it still is one of my favourite distributions.</description>
    </item>
    
  </channel>
</rss>
